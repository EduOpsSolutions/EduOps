// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id               String    @id @default(cuid())
  userId           String    @unique
  firstName        String
  middleName       String?
  lastName         String
  birthmonth       Int
  birthdate        Int
  birthyear        Int
  phoneNumber      String?
  profilePicLink   String?   @db.LongText
  status           String?
  email            String    @unique
  password         String
  role             String?   @default("student")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?
  firstLogin       Boolean   @default(true)
  resetToken       String?
  resetTokenExpiry DateTime?
  changePassword   Boolean   @default(true)

  posts            posts[]
  teacherSchedules schedule[]           @relation("TeacherSchedules")
  studentSchedules user_schedule[]      @relation("StudentSchedules")
  enrollments      student_enrollment[] @relation("StudentEnrollments")
  payments         payments[]
  adjustments      adjustments[]
}

model enrollment_request {
  id               String   @id @default(cuid())
  enrollmentId     String   @unique
  enrollmentStatus String   @default("pending")
  studentId        String?  @map("student_id")
  firstName        String
  middleName       String?
  lastName         String
  birthDate        DateTime
  civilStatus      String
  address          String
  referredBy       String
  contactNumber    String
  altContactNumber String?
  preferredEmail   String
  altEmail         String?
  motherName       String?
  motherContact    String?
  fatherName       String?
  fatherContact    String?
  guardianName     String?
  guardianContact  String?
  coursesToEnroll  String
  validIdPath      String?  @db.LongText
  idPhotoPath      String?  @db.LongText
  paymentProofPath String?  @db.LongText
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  payments payments[]
}

model course {
  id          String     @id @default(cuid())
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  maxNumber   Int        @default(30)
  visibility  Visibility
  description String?
  logo        String?
  price       Decimal    @db.Decimal(10, 2)
  schedule    Json?

  courseRequisite course_requisite[]
  academicPeriods academic_period_courses[]
  schedules       schedule[]
  payments        payments[]
  fees            fees[]
}

model schedule {
  id          Int       @id @default(autoincrement())
  days        String
  time        String?
  time_start  String?
  time_end    String?
  location    String?
  notes       String?   @db.Text
  color       String?   @default("#FFCF00")
  periodStart DateTime?
  periodEnd   DateTime?
  courseId    String?
  periodId    String?
  teacherId   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  course        course?          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  period        academic_period? @relation(fields: [periodId], references: [id], onDelete: Cascade)
  teacher       users?           @relation("TeacherSchedules", fields: [teacherId], references: [id], onDelete: SetNull)
  userSchedules user_schedule[]
}

model user_schedule {
  id         Int       @id @default(autoincrement())
  userId     String?
  scheduleId Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  user     users?    @relation("StudentSchedules", fields: [userId], references: [id], onDelete: Cascade)
  schedule schedule? @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
}

model student_enrollment {
  id        String           @id @default(cuid())
  studentId String
  periodId  String
  status    EnrollmentStatus @default(enrolled)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  deletedAt DateTime?

  student users           @relation("StudentEnrollments", fields: [studentId], references: [id], onDelete: Cascade)
  period  academic_period @relation("PeriodEnrollments", fields: [periodId], references: [id], onDelete: Cascade)

  @@unique([studentId, periodId])
}

enum EnrollmentStatus {
  enrolled
  completed
  dropped
  withdrawn
}

model course_requisite {
  id        String        @id @default(cuid())
  ruleName  String
  type      RequisiteType
  courseId  String
  course    course        @relation(fields: [courseId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?
}

model academic_period {
  id        String               @id @default(cuid())
  batchName String
  status    AcademicPeriodStatus @default(upcoming)
  startAt   DateTime
  endAt     DateTime
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  deletedAt DateTime?

  courses     academic_period_courses[]
  schedules   schedule[]
  enrollments student_enrollment[]      @relation("PeriodEnrollments")
  payments    payments[]
}

model academic_period_courses {
  id               String          @id @default(cuid())
  courseId         String
  academicperiodId String
  course           course          @relation(fields: [courseId], references: [id])
  academicPeriods  academic_period @relation(fields: [academicperiodId], references: [id])
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  deletedAt        DateTime?
}

model module {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model logs {
  id                 String   @id @default(cuid())
  moduleId           Int
  title              String
  content            String?
  initiatedByTeacher Boolean  @default(false)
  initiatedByStudent Boolean  @default(false)
  initiatedByAdmin   Boolean  @default(false)
  initiatedBySystem  Boolean  @default(false)
  sourceId           Int?
  createdAt          DateTime @default(now())
}

enum Visibility {
  hidden
  visible
}

enum AcademicPeriodStatus {
  upcoming
  ongoing
  ended
}

enum RequisiteType {
  prerequisite
  corequisite
}

model posts {
  id         String     @id @default(cuid())
  title      String
  content    String     @db.Text
  tag        PostTag    @default(global)
  status     PostStatus @default(visible)
  userId     String
  user       users      @relation(fields: [userId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt  DateTime?
  isArchived Boolean    @default(false)

  files post_files[]
}

model post_files {
  id        String     @id @default(cuid())
  url       String
  fileName  String?
  fileType  String?
  fileSize  Int?
  postId    String     @map("post_id")
  post      posts      @relation(fields: [postId], references: [id], onDelete: Cascade)
  status    FileStatus @default(visible)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model files {
  id           Int       @id @default(autoincrement())
  url          String    @db.LongText
  token        String?   @unique
  fileName     String?
  originalName String?
  directory    String?   @default("uncategorized")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
}

enum PostTag {
  global
  student
  teacher
}

enum PostStatus {
  visible
  hidden
  locked
}

enum FileStatus {
  visible
  deleted
}

model payments {
  id                  String        @id @default(cuid())
  userId              String
  feeId               String?
  enrollmentRequestId String?
  courseId            String?
  academicPeriodId    String?
  amount              Decimal       @db.Decimal(10, 2)
  currency            String        @default("PHP")
  status              PaymentStatus @default(pending)
  paymentMethod       String?
  referenceNumber     String?
  checkoutUrl         String?       @db.LongText // PayMongo checkout URL
  paymongoId          String? // PayMongo payment ID
  paymongoResponse    Json? // PayMongo webhook response data
  remarks             String?       @db.Text
  paidAt              DateTime?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  // Relations
  user              users               @relation(fields: [userId], references: [id])
  fee               fees?               @relation(fields: [feeId], references: [id])
  enrollmentRequest enrollment_request? @relation(fields: [enrollmentRequestId], references: [id], map: "payment_enrollment_fkey")
  course            course?             @relation(fields: [courseId], references: [id], map: "payment_course_fkey")
  academicPeriod    academic_period?    @relation(fields: [academicPeriodId], references: [id], map: "payment_academic_period_fkey")
  adjustments       adjustments[]
}

model fees {
  id        String   @id @default(cuid())
  courseId  String
  batchId   String
  price     Decimal  @db.Decimal(10, 2)
  name      String
  type      FeeType
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course      course        @relation(fields: [courseId], references: [id])
  payments    payments[]
  adjustments adjustments[]
}

model adjustments {
  id              String         @id @default(cuid())
  userId          String
  paymentId       String?
  feeId           String
  amount          Decimal        @db.Decimal(10, 2)
  type            AdjustmentType
  isRefunded      Boolean        @default(false)
  reason          String?        @db.Text
  referenceNumber String? // Reference for adjustment
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  user    users     @relation(fields: [userId], references: [id])
  payment payments? @relation(fields: [paymentId], references: [id])
  fee     fees      @relation(fields: [feeId], references: [id])
}

enum PaymentStatus {
  pending
  paid
  failed
  expired
  cancelled
  refunded
}

enum FeeType {
  down_payment
  tuition_fee
  document_fee
  book_fee
}

enum AdjustmentType {
  discount
  refund
  manual_charge
  fee_waiver
}
