// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id               String    @id @default(cuid())
  userId           String    @unique
  firstName        String
  middleName       String?
  lastName         String
  birthmonth       Int
  birthdate        Int
  birthyear        Int
  phoneNumber      String?
  profilePicLink   String?   @db.LongText
  status           String?
  email            String    @unique
  password         String
  role             String?   @default("student")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?
  firstLogin       Boolean   @default(true)
  resetToken       String?
  resetTokenExpiry DateTime?
  changePassword   Boolean   @default(true)

  posts               posts[]
  teacherSchedules    schedule[]            @relation("TeacherSchedules")
  studentSchedules    user_schedule[]       @relation("StudentSchedules")
  enrollments         student_enrollment[]  @relation("StudentEnrollments")
  payments            payments[]
  adjustments         adjustments[]
  documentRequests    document_request[]    @relation("UserDocumentRequests")
  documentValidations document_validation[] @relation("UserDocumentValidations")
  studentGrades       student_grade[]       @relation("UserStudentGrades")
  logs          logs[]
}

model enrollment_request {
  id               String   @id @default(cuid())
  enrollmentId     String   @unique
  enrollmentStatus String   @default("pending")
  studentId        String?  @map("student_id")
  firstName        String
  middleName       String?
  lastName         String
  birthDate        DateTime
  civilStatus      String
  address          String
  referredBy       String
  contactNumber    String
  altContactNumber String?
  preferredEmail   String
  altEmail         String?
  motherName       String?
  motherContact    String?
  fatherName       String?
  fatherContact    String?
  guardianName     String?
  guardianContact  String?
  coursesToEnroll  String
  validIdPath      String?  @db.LongText
  idPhotoPath      String?  @db.LongText
  paymentProofPath String?  @db.LongText
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  periodId         String?

  period        academic_period? @relation(fields: [periodId], references: [id], onDelete: Cascade)
  // Relations
  payments payments[]
}

model course {
  id          String     @id @default(cuid())
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  maxNumber   Int        @default(30)
  visibility  Visibility
  description String?
  logo        String?
  price       Decimal    @db.Decimal(10, 2)
  schedule    Json?

  courseRequisite course_requisite[]
  academicPeriods academic_period_courses[]
  schedules       schedule[]
  payments        payments[]
  fees            fees[]
  studentGrades   student_grade[]           @relation("CourseStudentGrades")
}

model schedule {
  id          Int       @id @default(autoincrement())
  days        String
  time        String?
  time_start  String?
  time_end    String?
  location    String?
  notes       String?   @db.Text
  color       String?   @default("#FFCF00")
  periodStart DateTime?
  periodEnd   DateTime?
  courseId    String?
  periodId    String?
  teacherId   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  capacity    Int? @default(30)

  course        course?          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  period        academic_period? @relation(fields: [periodId], references: [id], onDelete: Cascade)
  teacher       users?           @relation("TeacherSchedules", fields: [teacherId], references: [id], onDelete: SetNull)
  userSchedules user_schedule[]
}

model user_schedule {
  id         Int       @id @default(autoincrement())
  userId     String?
  scheduleId Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  user     users?    @relation("StudentSchedules", fields: [userId], references: [id], onDelete: Cascade)
  schedule schedule? @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
}

model student_enrollment {
  id        String           @id @default(cuid())
  studentId String
  periodId  String
  status    EnrollmentStatus @default(enrolled)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  deletedAt DateTime?

  student users           @relation("StudentEnrollments", fields: [studentId], references: [id], onDelete: Cascade)
  period  academic_period @relation("PeriodEnrollments", fields: [periodId], references: [id], onDelete: Cascade)

  @@unique([studentId, periodId])
}

enum EnrollmentStatus {
  enrolled
  completed
  dropped
  withdrawn
}

model course_requisite {
  id        String        @id @default(cuid())
  ruleName  String
  type      RequisiteType
  courseId  String
  course    course        @relation(fields: [courseId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?
}

model academic_period {
  id        String               @id @default(cuid())
  batchName String
  startAt   DateTime
  endAt     DateTime
  enrollmentOpenAt DateTime
  enrollmentCloseAt DateTime
  isEnrollmentClosed Boolean @default(false)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  deletedAt DateTime?

  courses     academic_period_courses[]
  schedules   schedule[]
  enrollments student_enrollment[]      @relation("PeriodEnrollments")
  payments    payments[]
  enrollment_request enrollment_request[]
}

model academic_period_courses {
  id               String          @id @default(cuid())
  courseId         String
  academicperiodId String
  course           course          @relation(fields: [courseId], references: [id])
  academicPeriods  academic_period @relation(fields: [academicperiodId], references: [id])
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  deletedAt        DateTime?
}

model module {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model logs {
  id        Int   @id @default(autoincrement())
  title    String
  content  String? @db.Text
  reqBody String? @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  userId String?
  moduleType ModuleType @default(UNCATEGORIZED)
  type LogType @default(user_activity)


  user      users? @relation(fields: [userId], references: [userId])
}

enum LogType {
  user_activity //for user actions like login, logout, etc.
  system_activity //for cron jobs and system maintenance
  api_response //for api responses
  error_log //for error logs like 500, 404, etc.
  security_log //for security logs like login attempts, failed login attempts, etc.
  other //for other logs like system logs, etc.
}

enum Visibility {
  hidden
  visible
}

enum RequisiteType {
  prerequisite
  corequisite
}

model posts {
  id         String     @id @default(cuid())
  title      String
  content    String     @db.Text
  tag        PostTag    @default(global)
  status     PostStatus @default(visible)
  userId     String
  user       users      @relation(fields: [userId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt  DateTime?
  isArchived Boolean    @default(false)

  files post_files[]
}

model post_files {
  id        String     @id @default(cuid())
  url       String     @db.LongText
  fileName  String?
  fileType  String?
  fileSize  Int?
  postId    String     @map("post_id")
  post      posts      @relation(fields: [postId], references: [id], onDelete: Cascade)
  status    FileStatus @default(visible)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model files {
  id           Int       @id @default(autoincrement())
  url          String    @db.LongText
  token        String?   @unique
  fileName     String?
  originalName String?
  directory    String?   @default("uncategorized")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
}

enum PostTag {
  global
  student
  teacher
}

enum PostStatus {
  visible
  hidden
  locked
}

enum FileStatus {
  visible
  deleted
}

model payments {
  id                  String        @id @default(cuid())
  userId              String
  transactionId       String        @unique // Format (PAY-YYYYMMDD-XXXXX)
  paymentIntentId     String?       // PayMongo payment intent ID (pi_xxxxx) for matching
  referenceNumber     String?       // PayMongo reference ID (pay_xxxxx) 
  feeId               String?
  enrollmentRequestId String?
  courseId            String?
  academicPeriodId    String?
  amount              Decimal       @db.Decimal(10, 2)
  currency            String        @default("PHP")
  status              PaymentStatus @default(pending)
  paymentMethod       String?
  paymongoResponse    Json?         // PayMongo webhook response data
  remarks             String?       @db.Text
  paidAt              DateTime?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  feeType             String?
  paymentEmail        String?       // Email from payment form (for receipt)
  // Relations
  user              users               @relation(fields: [userId], references: [id])
  fee               fees?               @relation(fields: [feeId], references: [id])
  enrollmentRequest enrollment_request? @relation(fields: [enrollmentRequestId], references: [id], map: "payment_enrollment_fkey")
  course            course?             @relation(fields: [courseId], references: [id], map: "payment_course_fkey")
  academicPeriod    academic_period?    @relation(fields: [academicPeriodId], references: [id], map: "payment_academic_period_fkey")
  adjustments       adjustments[]
}

model fees {
  id        String   @id @default(cuid())
  courseId  String
  batchId   String
  price     Decimal  @db.Decimal(10, 2)
  name      String
  type      FeeType
  isActive  Boolean  @default(true)
  dueDate   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course      course        @relation(fields: [courseId], references: [id])
  payments    payments[]
  adjustments adjustments[]
}

model adjustments {
  id              String         @id @default(cuid())
  userId          String
  paymentId       String?
  feeId           String
  amount          Decimal        @db.Decimal(10, 2)
  type            AdjustmentType
  isRefunded      Boolean        @default(false)
  reason          String?        @db.Text
  referenceNumber String? // Reference for adjustment
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  user    users     @relation(fields: [userId], references: [id])
  payment payments? @relation(fields: [paymentId], references: [id])
  fee     fees      @relation(fields: [feeId], references: [id])
}

enum PaymentStatus {
  pending
  paid
  failed
  expired
  cancelled
  refunded
}

enum FeeType {
  down_payment
  tuition_fee
  document_fee
  book_fee
}

enum AdjustmentType {
  discount
  refund
  manual_charge
  fee_waiver
}

enum ModuleType {
  UNCATEGORIZED
  AUTH
  ENROLLMENTS
  SCHEDULES
  GRADING
  DOCUMENTS
  PAYMENTS
  REPORTS
  CONTENTS
  SYSTEM
}

model document_template {
  id           String            @id @default(cuid())
  documentName String
  description  String?           @db.Text
  privacy      DocumentPrivacy   @default(public)
  requestBasis Boolean           @default(false)
  downloadable Boolean           @default(true)
  price        DocumentPriceType @default(free)
  amount       Decimal?          @db.Decimal(10, 2)
  uploadFile   String?           @db.LongText
  isActive     Boolean           @default(true)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  deletedAt    DateTime?

  // Relations
  requests    document_request[]
  validations document_validation[]
}

model document_request {
  id              String                @id @default(cuid())
  documentId      String
  userId          String?
  email           String
  firstName       String?
  lastName        String?
  phone           String?
  mode            DeliveryMode?         @default(pickup)
  address         String?
  city            String?
  purpose         String?               @db.Text
  additionalNotes String?               @db.Text
  status          DocumentRequestStatus @default(in_process)
  remarks         String?               @db.Text
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  // Relations
  document document_template @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user     users?            @relation("UserDocumentRequests", fields: [userId], references: [id], onDelete: SetNull)
}

model document_validation {
  id            String   @id @default(cuid())
  documentId    String?
  userId        String?
  documentName  String?
  fileSignature String   @unique
  isValid       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  document document_template? @relation(fields: [documentId], references: [id], onDelete: SetNull)
  user     users?             @relation("UserDocumentValidations", fields: [userId], references: [id], onDelete: SetNull)
}

enum DocumentPrivacy {
  public
  student_only
  teacher_only
}

enum DocumentPriceType {
  free
  paid
}

enum DeliveryMode {
  pickup
  delivery
}

enum DocumentRequestStatus {
  in_process
  in_transit
  delivered
  failed
  fulfilled
}

model student_grade {
  id           String     @id @default(cuid())
  studentId    String
  courseId     String
  periodId     String?
  grade        GradeValue
  approvedBy   String?    // userId of teacher/admin who approved
  approvedAt   DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  student users  @relation("UserStudentGrades", fields: [studentId], references: [id])
  course  course @relation("CourseStudentGrades", fields: [courseId], references: [id])
  files   grade_file[]
}

model grade_file {
  id             String     @id @default(cuid())
  studentGradeId String
  url            String     @db.LongText
  fileName       String?
  fileType       String?
  uploadedBy     String?    // userId of uploader
  uploadedAt     DateTime   @default(now())

  studentGrade student_grade @relation(fields: [studentGradeId], references: [id], onDelete: Cascade)
}

enum GradeValue {
  Pass
  Fail
  NoGrade
}