generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model academic_period {
  id                      String                    @id
  batchName               String
  startAt                 DateTime
  endAt                   DateTime
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime
  deletedAt               DateTime?
  enrollmentCloseAt       DateTime
  enrollmentOpenAt        DateTime
  isEnrollmentClosed      Boolean                   @default(false)
  academic_period_courses academic_period_courses[]
  payments                payments[]
  schedule                schedule[]
  student_enrollment      student_enrollment[]
}

model academic_period_courses {
  id               String          @id
  courseId         String
  academicperiodId String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime
  deletedAt        DateTime?
  academic_period  academic_period @relation(fields: [academicperiodId], references: [id])
  course           course          @relation(fields: [courseId], references: [id])

  @@index([academicperiodId], map: "academic_period_courses_academicperiodId_fkey")
  @@index([courseId], map: "academic_period_courses_courseId_fkey")
}

model adjustments {
  id              String           @id
  userId          String
  paymentId       String?
  feeId           String
  amount          Decimal          @db.Decimal(10, 2)
  type            adjustments_type
  isRefunded      Boolean          @default(false)
  reason          String?          @db.Text
  referenceNumber String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime
  fees            fees             @relation(fields: [feeId], references: [id])
  payments        payments?        @relation(fields: [paymentId], references: [id])
  users           users            @relation(fields: [userId], references: [id])

  @@index([feeId], map: "adjustments_feeId_fkey")
  @@index([paymentId], map: "adjustments_paymentId_fkey")
  @@index([userId], map: "adjustments_userId_fkey")
}

model course {
  id                      String                    @id
  name                    String
  price                   Decimal                   @db.Decimal(10, 2)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime
  deletedAt               DateTime?
  description             String?
  logo                    String?
  maxNumber               Int                       @default(30)
  visibility              course_visibility
  academic_period_courses academic_period_courses[]
  course_requisite        course_requisite[]
  fees                    fees[]
  payments                payments[]
  schedule                schedule[]
}

model course_requisite {
  id        String                @id
  ruleName  String
  type      course_requisite_type
  courseId  String
  createdAt DateTime              @default(now())
  updatedAt DateTime
  deletedAt DateTime?
  course    course                @relation(fields: [courseId], references: [id])

  @@index([courseId], map: "course_requisite_courseId_fkey")
}

model document_request {
  id                String                  @id
  documentId        String
  userId            String?
  email             String
  firstName         String?
  lastName          String?
  phone             String?
  mode              document_request_mode?  @default(pickup)
  address           String?
  city              String?
  purpose           String?                 @db.Text
  additionalNotes   String?                 @db.Text
  status            document_request_status @default(in_process)
  remarks           String?                 @db.Text
  createdAt         DateTime                @default(now())
  updatedAt         DateTime
  proofOfPayment    String?                 @db.LongText
  document_template document_template       @relation(fields: [documentId], references: [id], onDelete: Cascade)
  users             users?                  @relation(fields: [userId], references: [id])

  @@index([documentId], map: "document_request_documentId_fkey")
  @@index([userId], map: "document_request_userId_fkey")
}

model document_template {
  id                  String                    @id
  documentName        String
  description         String?                   @db.Text
  privacy             document_template_privacy @default(public)
  requestBasis        Boolean                   @default(false)
  downloadable        Boolean                   @default(true)
  price               document_template_price   @default(free)
  amount              Decimal?                  @db.Decimal(10, 2)
  isActive            Boolean                   @default(true)
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime
  deletedAt           DateTime?
  uploadFile          String?                   @db.LongText
  document_request    document_request[]
  document_validation document_validation[]
}

model document_validation {
  id                String             @id
  documentId        String?
  userId            String?
  documentName      String?
  fileSignature     String             @unique
  isValid           Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime
  document_template document_template? @relation(fields: [documentId], references: [id])
  users             users?             @relation(fields: [userId], references: [id])

  @@index([documentId], map: "document_validation_documentId_fkey")
  @@index([userId], map: "document_validation_userId_fkey")
}

model enrollment_request {
  id               String     @id
  enrollmentId     String     @unique
  enrollmentStatus String     @default("pending")
  student_id       String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime
  address          String
  altContactNumber String?
  altEmail         String?
  birthDate        DateTime
  civilStatus      String
  contactNumber    String
  coursesToEnroll  String
  fatherContact    String?
  fatherName       String?
  firstName        String
  guardianContact  String?
  guardianName     String?
  idPhotoPath      String?    @db.LongText
  lastName         String
  middleName       String?
  motherContact    String?
  motherName       String?
  preferredEmail   String
  referredBy       String
  validIdPath      String?    @db.LongText
  paymentProofPath String?    @db.LongText
  payments         payments[]
}

model fees {
  id          String        @id
  courseId    String
  batchId     String
  price       Decimal       @db.Decimal(10, 2)
  name        String
  type        fees_type
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  adjustments adjustments[]
  course      course        @relation(fields: [courseId], references: [id])
  payments    payments[]

  @@index([courseId], map: "fees_courseId_fkey")
}

model files {
  id           Int       @id @default(autoincrement())
  url          String    @db.LongText
  token        String?   @unique
  fileName     String?
  originalName String?
  directory    String?   @default("uncategorized")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  deletedAt    DateTime?
}

model grade_file {
  id             String   @id
  studentGradeId String
  url            String   @db.LongText
  fileName       String?
  fileType       String?
  uploadedBy     String?
  uploadedAt     DateTime @default(now())

  @@index([studentGradeId], map: "grade_file_studentGradeId_fkey")
}

model logs {
  id         Int             @id @default(autoincrement())
  title      String
  content    String?         @db.Text
  createdAt  DateTime        @default(now())
  deletedAt  DateTime?
  moduleType logs_moduleType @default(UNCATEGORIZED)
  reqBody    String?         @db.Text
  type       logs_type       @default(user_activity)
  updatedAt  DateTime
  userId     String?

  @@index([userId], map: "logs_userId_fkey")
}

model module {
  id        String   @id
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model notification {
  id        String    @id
  userId    String
  type      String
  title     String
  message   String
  data      String?   @db.LongText
  isRead    Boolean   @default(false)
  delivered Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime
  deletedAt DateTime?
  users     users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "notification_userId_fkey")
}

model payments {
  id                  String              @id
  userId              String
  feeId               String?
  enrollmentRequestId String?
  courseId            String?
  academicPeriodId    String?
  amount              Decimal             @db.Decimal(10, 2)
  currency            String              @default("PHP")
  status              payments_status     @default(pending)
  paymentMethod       String?
  referenceNumber     String?
  paymongoResponse    String?             @db.LongText
  remarks             String?             @db.Text
  paidAt              DateTime?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime
  feeType             String?
  paymentIntentId     String?
  transactionId       String
  paymentEmail        String?
  adjustments         adjustments[]
  academic_period     academic_period?    @relation(fields: [academicPeriodId], references: [id], map: "payment_academic_period_fkey")
  course              course?             @relation(fields: [courseId], references: [id], map: "payment_course_fkey")
  enrollment_request  enrollment_request? @relation(fields: [enrollmentRequestId], references: [id], map: "payment_enrollment_fkey")
  fees                fees?               @relation(fields: [feeId], references: [id])
  users               users               @relation(fields: [userId], references: [id])

  @@index([academicPeriodId], map: "payment_academic_period_fkey")
  @@index([courseId], map: "payment_course_fkey")
  @@index([enrollmentRequestId], map: "payment_enrollment_fkey")
  @@index([feeId], map: "payments_feeId_fkey")
  @@index([userId], map: "payments_userId_fkey")
}

model post_files {
  id        String            @id
  url       String            @db.LongText
  fileName  String?
  fileType  String?
  fileSize  Int?
  post_id   String
  status    post_files_status @default(visible)
  createdAt DateTime          @default(now())
  updatedAt DateTime
  posts     posts             @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@index([post_id], map: "post_files_post_id_fkey")
}

model posts {
  id         String       @id
  title      String
  content    String       @db.Text
  tag        posts_tag    @default(global)
  status     posts_status @default(visible)
  userId     String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime
  deletedAt  DateTime?
  isArchived Boolean      @default(false)
  post_files post_files[]
  users      users        @relation(fields: [userId], references: [id])

  @@index([userId], map: "posts_userId_fkey")
}

model schedule {
  id              Int              @id @default(autoincrement())
  days            String
  time            String?
  courseId        String?
  periodId        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime
  deletedAt       DateTime?
  teacherId       String?
  color           String?          @default("#FFCF00")
  location        String?
  notes           String?          @db.Text
  periodEnd       DateTime?
  periodStart     DateTime?
  time_end        String?
  time_start      String?
  capacity        Int?             @default(30)
  course          course?          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  academic_period academic_period? @relation(fields: [periodId], references: [id], onDelete: Cascade)
  users           users?           @relation(fields: [teacherId], references: [id])
  user_schedule   user_schedule[]

  @@index([courseId], map: "schedule_courseId_fkey")
  @@index([periodId], map: "schedule_periodId_fkey")
  @@index([teacherId], map: "schedule_teacherId_fkey")
}

model student_enrollment {
  id              String                    @id
  studentId       String
  periodId        String
  status          student_enrollment_status @default(enrolled)
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime
  deletedAt       DateTime?
  academic_period academic_period           @relation(fields: [periodId], references: [id], onDelete: Cascade)
  users           users                     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, periodId])
  @@index([periodId], map: "student_enrollment_periodId_fkey")
}

model student_fee {
  id        String           @id
  studentId String
  courseId  String
  batchId   String
  name      String
  amount    Decimal
  type      student_fee_type
  dueDate   DateTime?
  createdAt DateTime         @default(now())
  updatedAt DateTime
  deletedAt DateTime?

  @@index([batchId], map: "student_fee_batchId_fkey")
  @@index([courseId], map: "student_fee_courseId_fkey")
  @@index([studentId], map: "student_fee_studentId_fkey")
}

model student_grade {
  id         String              @id
  studentId  String
  courseId   String
  periodId   String?
  grade      student_grade_grade
  approvedBy String?
  approvedAt DateTime?
  createdAt  DateTime            @default(now())
  updatedAt  DateTime

  @@index([courseId], map: "student_grade_courseId_fkey")
  @@index([studentId], map: "student_grade_studentId_fkey")
}

model user_schedule {
  id         Int       @id @default(autoincrement())
  userId     String?
  scheduleId Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  deletedAt  DateTime?
  schedule   schedule? @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  users      users?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([scheduleId], map: "user_schedule_scheduleId_fkey")
  @@index([userId], map: "user_schedule_userId_fkey")
}

model users {
  id                  String                @id
  userId              String                @unique
  firstName           String
  middleName          String?
  lastName            String
  birthmonth          Int
  birthdate           Int
  birthyear           Int
  profilePicLink      String?               @db.LongText
  status              String?
  email               String                @unique
  password            String
  role                String?               @default("student")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  deletedAt           DateTime?
  firstLogin          Boolean               @default(true)
  resetToken          String?
  resetTokenExpiry    DateTime?
  phoneNumber         String?
  changePassword      Boolean               @default(true)
  adjustments         adjustments[]
  document_request    document_request[]
  document_validation document_validation[]
  notification        notification[]
  payments            payments[]
  posts               posts[]
  schedule            schedule[]
  student_enrollment  student_enrollment[]
  user_schedule       user_schedule[]
}

enum course_requisite_type {
  prerequisite
  corequisite
}

enum document_template_privacy {
  public
  student_only
  teacher_only
}

enum posts_tag {
  global
  student
  teacher
}

enum student_enrollment_status {
  enrolled
  completed
  dropped
  withdrawn
}

enum posts_status {
  visible
  hidden
  locked
}

enum student_grade_grade {
  Pass
  Fail
  NoGrade
}

enum adjustments_type {
  discount
  refund
  manual_charge
  fee_waiver
}

enum fees_type {
  down_payment
  tuition_fee
  document_fee
  book_fee
}

enum logs_moduleType {
  UNCATEGORIZED
  AUTH
  ENROLLMENTS
  SCHEDULES
  GRADING
  DOCUMENTS
  PAYMENTS
  REPORTS
  CONTENTS
  SYSTEM
}

enum document_template_price {
  free
  paid
}

enum post_files_status {
  visible
  deleted
}

enum student_fee_type {
  fee
  discount
}

enum document_request_mode {
  pickup
  delivery
}

enum logs_type {
  user_activity
  system_activity
  api_response
  error_log
  security_log
  other
}

enum payments_status {
  pending
  paid
  failed
  expired
  cancelled
  refunded
}

enum course_visibility {
  hidden
  visible
}

enum document_request_status {
  in_process
  in_transit
  delivered
  failed
  fulfilled
}
