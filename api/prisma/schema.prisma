generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id                  String                @id @default(cuid())
  userId              String                @unique
  firstName           String
  middleName          String?
  lastName            String
  birthmonth          Int
  birthdate           Int
  birthyear           Int
  profilePicLink      String?               @db.LongText
  status              String?
  email               String                @unique
  password            String
  role                String?               @default("student")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  deletedAt           DateTime?
  firstLogin          Boolean               @default(true)
  resetToken          String?
  resetTokenExpiry    DateTime?
  phoneNumber         String?
  changePassword      Boolean               @default(true)
  adjustments         adjustments[]
  documentRequests    document_request[]    @relation("UserDocumentRequests")
  documentValidations document_validation[] @relation("UserDocumentValidations")
  payments            payments[]
  posts               posts[]
  teacherSchedules    schedule[]            @relation("TeacherSchedules")
  enrollments         student_enrollment[]  @relation("StudentEnrollments")
  studentSchedules    user_schedule[]       @relation("StudentSchedules")
  notifications notification[]
}

model enrollment_request {
  id               String     @id @default(cuid())
  enrollmentId     String     @unique
  enrollmentStatus String     @default("pending")
  studentId        String?    @map("student_id")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  address          String
  altContactNumber String?
  altEmail         String?
  birthDate        DateTime
  civilStatus      String
  contactNumber    String
  coursesToEnroll  String
  fatherContact    String?
  fatherName       String?
  firstName        String
  guardianContact  String?
  guardianName     String?
  idPhotoPath      String?    @db.LongText
  lastName         String
  middleName       String?
  motherContact    String?
  motherName       String?
  preferredEmail   String
  referredBy       String
  validIdPath      String?    @db.LongText
  paymentProofPath String?    @db.LongText
  payments         payments[]
}

model course {
  id              String                    @id @default(cuid())
  name            String
  price           Decimal                   @db.Decimal(10, 2)
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  deletedAt       DateTime?
  description     String?
  logo            String?
  maxNumber       Int                       @default(30)
  schedule        String?                   @db.LongText
  visibility      Visibility
  academicPeriods academic_period_courses[]
  courseRequisite course_requisite[]        @relation("CourseMain")
  fees            fees[]
  payments        payments[]
  schedules       schedule[]
}

model schedule {
  id            Int              @id @default(autoincrement())
  days          String
  time          String?
  courseId      String?
  periodId      String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  deletedAt     DateTime?
  teacherId     String?
  color         String?          @default("#FFCF00")
  location      String?
  notes         String?          @db.Text
  periodEnd     DateTime?
  periodStart   DateTime?
  time_end      String?
  time_start    String?
  capacity      Int?             @default(30)
  course        course?          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  period        academic_period? @relation(fields: [periodId], references: [id], onDelete: Cascade)
  teacher       users?           @relation("TeacherSchedules", fields: [teacherId], references: [id])
  userSchedules user_schedule[]

  @@index([courseId], map: "schedule_courseId_fkey")
  @@index([periodId], map: "schedule_periodId_fkey")
  @@index([teacherId], map: "schedule_teacherId_fkey")
}

model user_schedule {
  id         Int       @id @default(autoincrement())
  userId     String?
  scheduleId Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  schedule   schedule? @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  user       users?    @relation("StudentSchedules", fields: [userId], references: [id], onDelete: Cascade)

  @@index([scheduleId], map: "user_schedule_scheduleId_fkey")
  @@index([userId], map: "user_schedule_userId_fkey")
}

model student_enrollment {
  id        String           @id @default(cuid())
  studentId String
  periodId  String
  status    EnrollmentStatus @default(enrolled)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  deletedAt DateTime?
  period    academic_period  @relation("PeriodEnrollments", fields: [periodId], references: [id], onDelete: Cascade)
  student   users            @relation("StudentEnrollments", fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, periodId])
  @@index([periodId], map: "student_enrollment_periodId_fkey")
}

model course_requisite {
  id        String        @id @default(cuid())
  ruleName  String
  type      RequisiteType
  courseId  String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?
  course    course        @relation("CourseMain", fields: [courseId], references: [id])

  @@index([courseId], map: "course_requisite_courseId_fkey")
}

model academic_period {
  id                 String                    @id @default(cuid())
  batchName          String
  startAt            DateTime
  endAt              DateTime
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  deletedAt          DateTime?
  enrollmentCloseAt  DateTime
  enrollmentOpenAt   DateTime
  isEnrollmentClosed Boolean                   @default(false)
  courses            academic_period_courses[]
  payments           payments[]
  schedules          schedule[]
  enrollments        student_enrollment[]      @relation("PeriodEnrollments")
}

model academic_period_courses {
  id               String          @id @default(cuid())
  courseId         String
  academicperiodId String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  deletedAt        DateTime?
  academicPeriods  academic_period @relation(fields: [academicperiodId], references: [id])
  course           course          @relation(fields: [courseId], references: [id])

  @@index([academicperiodId], map: "academic_period_courses_academicperiodId_fkey")
  @@index([courseId], map: "academic_period_courses_courseId_fkey")
}

model module {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model logs {
  id                 String   @id
  title              String
  content            String?
  createdAt          DateTime @default(now())
  initiatedByAdmin   Boolean  @default(false)
  initiatedByStudent Boolean  @default(false)
  initiatedBySystem  Boolean  @default(false)
  initiatedByTeacher Boolean  @default(false)
  moduleId           Int
  sourceId           Int?
}

model posts {
  id         String       @id @default(cuid())
  title      String
  content    String       @db.Text
  tag        PostTag      @default(global)
  status     PostStatus   @default(visible)
  userId     String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?
  isArchived Boolean      @default(false)
  files      post_files[]
  user       users        @relation(fields: [userId], references: [id])

  @@index([userId], map: "posts_userId_fkey")
}

model post_files {
  id        String     @id @default(cuid())
  url       String
  fileName  String?
  fileType  String?
  fileSize  Int?
  postId    String     @map("post_id")
  status    FileStatus @default(visible)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  post      posts      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId], map: "post_files_post_id_fkey")
}

model files {
  id           Int       @id @default(autoincrement())
  url          String    @db.LongText
  token        String?   @unique
  fileName     String?
  originalName String?
  directory    String?   @default("uncategorized")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
}

model payments {
  id                  String              @id @default(cuid())
  userId              String
  feeId               String?
  enrollmentRequestId String?
  courseId            String?
  academicPeriodId    String?
  amount              Decimal             @db.Decimal(10, 2)
  currency            String              @default("PHP")
  status              PaymentStatus       @default(pending)
  paymentMethod       String?
  referenceNumber     String?
  paymongoResponse    String?             @db.LongText
  remarks             String?             @db.Text
  paidAt              DateTime?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  checkoutUrl         String?             @db.LongText
  paymongoId          String?
  adjustments         adjustments[]
  academicPeriod      academic_period?    @relation(fields: [academicPeriodId], references: [id], map: "payment_academic_period_fkey")
  course              course?             @relation(fields: [courseId], references: [id], map: "payment_course_fkey")
  enrollmentRequest   enrollment_request? @relation(fields: [enrollmentRequestId], references: [id], map: "payment_enrollment_fkey")
  fee                 fees?               @relation(fields: [feeId], references: [id])
  user                users               @relation(fields: [userId], references: [id])

  @@index([academicPeriodId], map: "payment_academic_period_fkey")
  @@index([courseId], map: "payment_course_fkey")
  @@index([enrollmentRequestId], map: "payment_enrollment_fkey")
  @@index([feeId], map: "payments_feeId_fkey")
  @@index([userId], map: "payments_userId_fkey")
}

model fees {
  id          String        @id @default(cuid())
  courseId    String
  batchId     String
  price       Decimal       @db.Decimal(10, 2)
  name        String
  type        FeeType
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  adjustments adjustments[]
  course      course        @relation(fields: [courseId], references: [id])
  payments    payments[]

  @@index([courseId], map: "fees_courseId_fkey")
}

model adjustments {
  id              String         @id @default(cuid())
  userId          String
  paymentId       String?
  feeId           String
  amount          Decimal        @db.Decimal(10, 2)
  type            AdjustmentType
  isRefunded      Boolean        @default(false)
  reason          String?        @db.Text
  referenceNumber String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  fee             fees           @relation(fields: [feeId], references: [id])
  payment         payments?      @relation(fields: [paymentId], references: [id])
  user            users          @relation(fields: [userId], references: [id])

  @@index([feeId], map: "adjustments_feeId_fkey")
  @@index([paymentId], map: "adjustments_paymentId_fkey")
  @@index([userId], map: "adjustments_userId_fkey")
}

model document_template {
  id           String                @id @default(cuid())
  documentName String
  description  String?               @db.Text
  privacy      DocumentPrivacy       @default(public)
  requestBasis Boolean               @default(false)
  downloadable Boolean               @default(true)
  price        DocumentPriceType     @default(free)
  amount       Decimal?              @db.Decimal(10, 2)
  isActive     Boolean               @default(true)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  deletedAt    DateTime?
  uploadFile   String?               @db.LongText
  requests     document_request[]
  validations  document_validation[]
}

model document_request {
  id              String                @id @default(cuid())
  documentId      String
  userId          String?
  email           String
  firstName       String?
  lastName        String?
  phone           String?
  mode            DeliveryMode?         @default(pickup)
  address         String?
  city            String?
  purpose         String?               @db.Text
  additionalNotes String?               @db.Text
  status          DocumentRequestStatus @default(in_process)
  remarks         String?               @db.Text
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  proofOfPayment  String?               @db.LongText
  document        document_template     @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user            users?                @relation("UserDocumentRequests", fields: [userId], references: [id])

  @@index([documentId], map: "document_request_documentId_fkey")
  @@index([userId], map: "document_request_userId_fkey")
}

model document_validation {
  id            String             @id @default(cuid())
  documentId    String?
  userId        String?
  documentName  String?
  fileSignature String             @unique
  isValid       Boolean            @default(true)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  document      document_template? @relation(fields: [documentId], references: [id])
  user          users?             @relation("UserDocumentValidations", fields: [userId], references: [id])

  @@index([documentId], map: "document_validation_documentId_fkey")
  @@index([userId], map: "document_validation_userId_fkey")
}

enum EnrollmentStatus {
  enrolled
  completed
  dropped
  withdrawn
}

enum Visibility {
  hidden
  visible
}

enum RequisiteType {
  prerequisite
  corequisite
}

enum PostTag {
  global
  student
  teacher
}

enum PostStatus {
  visible
  hidden
  locked
}

enum FileStatus {
  visible
  deleted
}

enum PaymentStatus {
  pending
  paid
  failed
  expired
  cancelled
  refunded
}

enum FeeType {
  down_payment
  tuition_fee
  document_fee
  book_fee
}

enum AdjustmentType {
  discount
  refund
  manual_charge
  fee_waiver
}

enum DocumentPrivacy {
  public
  student_only
  teacher_only
}

enum DocumentPriceType {
  free
  paid
}

enum DeliveryMode {
  pickup
  delivery
}

enum DocumentRequestStatus {
  in_process
  in_transit
  delivered
  failed
  fulfilled
}


model notification {
  id         String   @id @default(cuid())
  userId     String
  type       String
  title      String
  message    String
  data       Json?
  isRead     Boolean  @default(false)
  delivered  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)
}